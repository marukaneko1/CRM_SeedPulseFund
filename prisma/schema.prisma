// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          String    @default("MEMBER") // ADMIN, MANAGER, MEMBER
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Google Workspace Integration
  googleAccessToken   String?
  googleRefreshToken  String?
  googleProfile       String?
  googleConnectedAt   DateTime?
  
  // Relations
  deals         Deal[]
  contacts      Contact[]
  companies     Company[]
  messagesSent  Message[] @relation("MessageSender")
  emailsSent    Email[]   @relation("EmailSender")
  calendarEvents CalendarEvent[]
  activities    Activity[]
  directChats1  DirectChat[] @relation("DirectChatUser1")
  directChats2  DirectChat[] @relation("DirectChatUser2")
  pollVotes     PollVote[]
  eventAttendees EventAttendee[]
  createdTasks  Task[] @relation("TaskCreator")
  notifications Notification[]
  reminders     Reminder[]
  files         File[]
  aiChats       AIChat[]
  ideas         Idea[]
  ideaComments  IdeaComment[]
  ideaVotes     IdeaVote[]
  
  @@map("users")
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?
  position    String?
  linkedin    String?
  twitter     String?
  notes       String?
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  deals       Deal[]
  emails      Email[]
  activities  Activity[]
  
  @@map("contacts")
}

model Company {
  id            String        @id @default(cuid())
  name          String
  website       String?
  industry      String?
  stage         String?       // IDEA, PRE_SEED, SEED, SERIES_A, etc.
  description   String?
  logo          String?
  foundedYear   Int?
  teamSize      Int?
  location      String?
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  contacts      Contact[]
  deals         Deal[]
  portfolio     Portfolio?
  
  @@map("companies")
}

model Deal {
  id            String      @id @default(cuid())
  title         String
  amount        Float?
  stage         String      @default("LEAD") // LEAD, QUALIFIED, MEETING, etc.
  probability   Int         @default(50)
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  notes         String?
  companyId     String?
  company       Company?    @relation(fields: [companyId], references: [id])
  contactId     String?
  contact       Contact?    @relation(fields: [contactId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  activities    Activity[]
  tasks         Task[]
  
  @@map("deals")
}

model Portfolio {
  id                String    @id @default(cuid())
  companyId         String    @unique
  company           Company   @relation(fields: [companyId], references: [id])
  investmentAmount  Float
  investmentDate    DateTime
  equityPercentage  Float?
  currentValuation  Float?
  status           String    @default("ACTIVE") // ACTIVE, EXITED, FAILED
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  metrics          PortfolioMetric[]
  
  @@map("portfolios")
}

model PortfolioMetric {
  id          String    @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  metricDate  DateTime
  revenue     Float?
  users       Int?
  mrr         Float?
  arr         Float?
  burnRate    Float?
  runway      Int?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("portfolio_metrics")
}

model Message {
  id          String            @id @default(cuid())
  content     String?
  type        String            @default("TEXT") // TEXT, VOICE, FILE, IMAGE, POLL, EVENT, AI_IMAGE
  channelId   String?
  channel     Channel?          @relation(fields: [channelId], references: [id])
  directChatId String?
  directChat  DirectChat?       @relation(fields: [directChatId], references: [id])
  senderId    String
  sender      User              @relation("MessageSender", fields: [senderId], references: [id])
  attachments MessageAttachment[]
  poll        Poll?
  event       Event?
  isRead      Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@map("messages")
}

model DirectChat {
  id        String    @id @default(cuid())
  user1Id   String
  user1     User      @relation("DirectChatUser1", fields: [user1Id], references: [id])
  user2Id   String
  user2     User      @relation("DirectChatUser2", fields: [user2Id], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([user1Id, user2Id])
  @@map("direct_chats")
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  filename  String
  fileType  String   // image, video, audio, document
  fileSize  Int
  fileUrl   String
  createdAt DateTime @default(now())
  
  @@map("message_attachments")
}

model Poll {
  id        String      @id @default(cuid())
  messageId String      @unique
  message   Message     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  question  String
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime    @default(now())
  expiresAt DateTime?
  
  @@map("polls")
}

model PollOption {
  id     String @id @default(cuid())
  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  text   String
  votes  PollVote[]
  
  @@map("poll_options")
}

model PollVote {
  id       String      @id @default(cuid())
  pollId   String
  poll     Poll        @relation(fields: [pollId], references: [id], onDelete: Cascade)
  optionId String
  option   PollOption  @relation(fields: [optionId], references: [id], onDelete: Cascade)
  userId   String
  user     User        @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  
  @@unique([pollId, userId])
  @@map("poll_votes")
}

model Event {
  id          String    @id @default(cuid())
  messageId   String    @unique
  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  attendees   EventAttendee[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("events")
}

model EventAttendee {
  id      String @id @default(cuid())
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  status  String @default("PENDING") // PENDING, ACCEPTED, DECLINED
  
  @@unique([eventId, userId])
  @@map("event_attendees")
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  messages    Message[]
  
  @@map("channels")
}

model Email {
  id            String       @id @default(cuid())
  subject       String
  body          String
  from          String
  to            String       // Store as comma-separated string for SQLite
  cc            String       @default("") // Store as comma-separated string
  bcc           String       @default("") // Store as comma-separated string
  status        String       @default("DRAFT") // DRAFT, SCHEDULED, SENT, etc.
  scheduledAt   DateTime?
  sentAt        DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  senderId      String
  sender        User         @relation("EmailSender", fields: [senderId], references: [id])
  contactId     String?
  contact       Contact?     @relation(fields: [contactId], references: [id])
  campaignId    String?
  campaign      EmailCampaign? @relation(fields: [campaignId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@map("emails")
}

model EmailCampaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("DRAFT") // DRAFT, ACTIVE, PAUSED, COMPLETED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  emails      Email[]
  
  @@map("email_campaigns")
}

model CalendarEvent {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  meetingLink String?
  googleEventId String?
  calendlyEventId String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("calendar_events")
}

model Activity {
  id          String       @id @default(cuid())
  type        String       // NOTE, CALL, MEETING, EMAIL, TASK, etc.
  title       String
  description String?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  contactId   String?
  contact     Contact?     @relation(fields: [contactId], references: [id])
  dealId      String?
  deal        Deal?        @relation(fields: [dealId], references: [id])
  createdAt   DateTime     @default(now())
  
  @@map("activities")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("pending") // pending, in_progress, completed
  priority    String    @default("medium") // low, medium, high
  dueDate     DateTime?
  assignedTo  String?
  createdBy   String
  user        User      @relation("TaskCreator", fields: [createdBy], references: [id])
  dealId      String?
  deal        Deal?     @relation(fields: [dealId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("tasks")
}

model Notification {
  id        String    @id @default(cuid())
  type      String    // EMAIL, MEETING, DEAL, MESSAGE, TASK, REMINDER
  title     String
  message   String
  priority  String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  read      Boolean   @default(false)
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  linkUrl   String?
  createdAt DateTime  @default(now())
  readAt    DateTime?
  
  @@map("notifications")
}

model Reminder {
  id          String    @id @default(cuid())
  title       String
  description String?
  reminderDate DateTime
  completed   Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  dealId      String?
  contactId   String?
  eventId     String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  
  @@map("reminders")
}

model File {
  id          String    @id @default(cuid())
  name        String
  originalName String
  fileType    String
  fileSize    Int
  fileUrl     String
  folder      String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  dealId      String?
  contactId   String?
  companyId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("files")
}

model AIChat {
  id        String    @id @default(cuid())
  title     String    @default("New Chat")
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  AIMessage[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("ai_chats")
}

model AIMessage {
  id        String    @id @default(cuid())
  role      String    // user, assistant, system
  content   String
  chatId    String
  chat      AIChat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  
  @@map("ai_messages")
}

model Idea {
  id          String        @id @default(cuid())
  title       String
  description String
  category    String        @default("GENERAL") // GENERAL, PRODUCT, PROCESS, MARKETING, TECH
  status      String        @default("NEW") // NEW, IN_PROGRESS, REVIEW, IMPLEMENTED, REJECTED, NEW_COMPANY
  priority    String        @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  tags        String?       // Comma-separated tags
  color       String        @default("YELLOW") // YELLOW, BLUE, GREEN, PINK, ORANGE, PURPLE
  positionX   Float?        // For drag-and-drop positioning
  positionY   Float?        // For drag-and-drop positioning
  isPinned    Boolean       @default(false)
  isArchived  Boolean       @default(false)
  authorId    String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    IdeaComment[]
  votes       IdeaVote[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@map("ideas")
}

model IdeaComment {
  id        String   @id @default(cuid())
  content   String
  ideaId    String
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@map("idea_comments")
}

model IdeaVote {
  id        String   @id @default(cuid())
  ideaId    String
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // UP, DOWN
  createdAt DateTime @default(now())
  
  @@unique([ideaId, userId])
  @@map("idea_votes")
}

